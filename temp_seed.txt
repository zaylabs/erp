<?php

namespace Database\Seeders;

use App\Models\AttendanceRecord;
use App\Models\Employee;
use App\Models\EmploymentDetail;
use App\Models\Kpi;
use App\Models\Payroll;
use App\Models\Recruitment;
use App\Models\User;
use App\Models\WorkSchedule;
use Carbon\Carbon;
use Illuminate\Database\Seeder;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;

class HRSeeder extends Seeder
{
    /**
     * Seed a sample HR dataset.
     */
    public function run(): void
    {
        $faker = \Faker\Factory::create();

        // Create a default work schedule
        $defaultSchedule = WorkSchedule::query()->first() ?: WorkSchedule::create([
            'name' => 'Standard 9-6',
            'start_time' => '09:00:00',
            'end_time' => '18:00:00',
            'days_of_week' => [1,2,3,4,5],
        ]);

        // Role quotas
        $roles = [
            'Executive' => 2,
            'Manager' => 4,
            'Sales Manager' => 6,
            'Sales Officer' => 10,
        ];

        $employees = collect();

        // 1) Users + Employees
        $employeeCounter = 1;
        foreach ($roles as $role => $count) {
            for ($i = 0; $i < $count; $i++) {
                $name = $faker->name();
                $user = User::factory()->create([
                    'name' => $name,
                    'email' => Str::slug($name) . '+' . Str::random(6) . '@example.com',
                    'role' => $role,
                ]);

                $employee = Employee::create([
                    'user_id' => $user->id,
                    'employee_code' => 'EMP-'.str_pad((string)$employeeCounter, 4, '0', STR_PAD_LEFT),
                    'name' => $name,
                    'date_of_birth' => Carbon::now()->subYears(rand(22, 50))->subDays(rand(0, 365))->toDateString(),
                    'phone' => $faker->phoneNumber(),
                    'address' => $faker->address(),
                    'emergency_phone' => $faker->phoneNumber(),
                    'cnic' => (string) $faker->numerify('#############'),
                    'role' => $role,
                    'qr_payload' => 'EMP:EMP-'.str_pad((string)$employeeCounter, 4, '0', STR_PAD_LEFT).'|'.$name,
                ]);

                $employees->push($employee);
                $employeeCounter++;
            }
        }

        // Managers pool (exclude Sales Officer from being a reporting manager)
        $managerPool = $employees->filter(fn ($e) => in_array($e->role, ['Executive', 'Manager', 'Sales Manager']))->values();

        // 2) Employment details (latest effective date per employee)
        $departments = ['Sales', 'Operations', 'HR', 'Finance', 'Support'];
        foreach ($employees as $emp) {
            $manager = $managerPool->isNotEmpty()
                ? $managerPool->random()
                : null;
            if ($manager && $manager->id === $emp->id && $managerPool->count() > 1) {
                // Avoid self as manager
                $manager = $managerPool->where('id', '!=', $emp->id)->random();
            }

            EmploymentDetail::create([
                'employee_id' => $emp->id,
                'job_title' => $emp->role,
                'department' => Arr::random($departments),
                'reporting_manager_id' => $manager?->id,
                'employment_status' => Arr::random(['full-time','part-time','contractor']),
                'position' => $emp->role,
                'pay_grade' => Arr::random(['A1','A2','B1','B2','C1']),
                'pay' => rand(40_000, 300_000),
                'allowances' => rand(2_000, 50_000),
                'transport' => rand(0, 10_000),
                'other_allowances' => rand(0, 10_000),
                'effective_date' => Carbon::now()->subMonths(rand(0, 24))->toDateString(),
            ]);
        }

        // 3) Attendance (a few recent days per employee)
        foreach ($employees as $emp) {
            $days = 3; // keep it light
            for ($d = 0; $d < $days; $d++) {
                $date = Carbon::now()->subDays($d + rand(0, 3))->toDateString();
                AttendanceRecord::create([
                    'employee_id' => $emp->id,
                    'work_date' => $date,
                    'clock_in' => '09:'.str_pad((string)rand(0, 20), 2, '0', STR_PAD_LEFT).':00',
                    'clock_out' => '18:'.str_pad((string)rand(0, 20), 2, '0', STR_PAD_LEFT).':00',
                    'work_schedule_id' => $defaultSchedule->id,
                    'status' => Arr::random(['present','present','present','on_leave']),
                    'leave_type' => null,
                    'approved_by' => null,
                ]);
            }
        }

        // 4) Payrolls (one period per employee)
        foreach ($employees as $emp) {
            $periodStart = Carbon::now()->subMonth()->startOfMonth()->toDateString();
            $periodEnd = Carbon::now()->subMonth()->endOfMonth()->toDateString();
            $salary = rand(60_000, 250_000);
            Payroll::create([
                'employee_id' => $emp->id,
                'period_start' => $periodStart,
                'period_end' => $periodEnd,
                'salary' => $salary,
                'hourly_wage' => null,
                'tax_information' => [
                    'ntn' => strtoupper(Str::random(8)),
                ],
                'bank_account_details' => [
                    'bank' => 'Sample Bank',
                    'iban' => 'PK'.rand(10,99).Str::upper(Str::random(20)),
                ],
                'benefits' => [
                    'health' => true,
                    'pf' => true,
                ],
                'total_compensation' => $salary + rand(0, 20_000),
            ]);
        }

        // 5) KPIs (current quarter)
        $currentQuarter = 'Q'.((int)ceil(Carbon::now()->month/3)).' '.Carbon::now()->year;
        foreach ($employees as $emp) {
            Kpi::create([
                'employee_id' => $emp->id,
                'period' => $currentQuarter,
                'goals' => [
                    'primary' => 'Deliver on quarterly objectives',
                ],
                'performance_rating' => rand(30, 50) / 10, // 3.0 - 5.0
                'review_notes' => 'Auto-generated sample review.',
                'trainings' => [
                    'courses' => ['Orientation','Compliance'],
                ],
                'skills' => ['Communication','Teamwork'],
            ]);
        }

        // 6) Recruitment (sample candidates)
        for ($i = 0; $i < 6; $i++) {
            Recruitment::create([
                'candidate_name' => $faker->name(),
                'application_date' => Carbon::now()->subDays(rand(1, 30))->toDateString(),
                'application_details' => [
                    'source' => Arr::random(['LinkedIn','Referral','Website']),
                ],
                'resume_path' => null,
                'interview_notes' => 'Initial screening completed.',
                'onboarding_checklist' => ['NDA','ID Proof','Address Proof'],
                'status' => Arr::random(['applied','interview','offer','hired','rejected']),
                'new_hire_employee_id' => null,
            ]);
        }
    }
}

